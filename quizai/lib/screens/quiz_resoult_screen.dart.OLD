import 'package:flutter/material.dart';
import 'package:charts_flutter/flutter.dart' as charts;

class QuizResultScreen extends StatelessWidget {
  final String quizTitle = "costam";
  final String difficulty = "Trudne";
  final String educationLevel = "Magister";
  final int totalQuestions = 5;
  final int correctAnswers = 3;
  final List<Map<String, dynamic>> userAnswers = [
      {"questionNumber": 1, "anwser": "test anwser 1"},
      {"questionNumber": 2, "anwser": "test anwser 2"},
      {"questionNumber": 3, "anwser": "test anwser 3"},
      {"questionNumber": 4, "anwser": "test anwser 4"},
      {"questionNumber": 5, "anwser": "test anwser 5"},
  ]; // { "questionNumber": int, "answer": String }


  @override
  Widget build(BuildContext context) {
    final double percentage = (correctAnswers / totalQuestions) * 100;
    final List<charts.Series> pieData = [
      charts.Series(
        id: 'Quiz Results',
        data: [
          {'label': 'Correct', 'value': correctAnswers, 'color': Colors.green},
          {'label': 'Incorrect', 'value': totalQuestions - correctAnswers, 'color': Colors.red},
        ],
        domainFn: (data, _) => data['label'],
        measureFn: (data, _) => data['value'],
        colorFn: (data, _) => charts.ColorUtil.fromDartColor(data['color']),
      ),
    ];

    return Scaffold(
      backgroundColor: const Color(0xFFF3F4F6),
      appBar: AppBar(
        title: Text('Quiz Result: $quizTitle'),
        backgroundColor: const Color(0xFF1E88E5),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Side: Chart and stats
            Expanded(
              flex: 1,
              child: Column(
                children: [
                  // Pie chart
                  SizedBox(
                    height: 200,
                    child: charts.PieChart(
                      pieData,
                      animate: true,
                      defaultRenderer: charts.ArcRendererConfig(
                        arcWidth: 60,
                        arcRendererDecorators: [charts.ArcLabelDecorator()],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  // Stats cards
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      _StatCard(
                        title: 'Correct',
                        value: '$correctAnswers / $totalQuestions',
                        color: Colors.green,
                      ),
                      _StatCard(
                        title: 'Percentage',
                        value: '${percentage.toStringAsFixed(1)}%',
                        color: Colors.blue,
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 16),
            // Right Side: Quiz Info and User Answers
            Expanded(
              flex: 2,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // Quiz Info
                  _InfoCard(
                    title: 'Quiz Info',
                    children: [
                      _InfoRow(label: 'Title', value: quizTitle),
                      _InfoRow(label: 'Difficulty', value: difficulty),
                      _InfoRow(label: 'Education Level', value: educationLevel),
                      _InfoRow(label: 'Total Questions', value: '$totalQuestions'),
                    ],
                  ),
                  const SizedBox(height: 16),
                  // User Answers
                  Expanded(
                    child: _ScrollableListCard(
                      title: 'Your Answers',
                      items: userAnswers
                          .map((answer) => 'Q${answer['questionNumber']}: ${answer['answer']}')
                          .toList(),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _StatCard extends StatelessWidget {
  final String title;
  final String value;
  final Color color;

  const _StatCard({
    Key? key,
    required this.title,
    required this.value,
    required this.color,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: Card(
        color: color,
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                title,
                style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              Text(
                value,
                style: const TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _InfoCard extends StatelessWidget {
  final String title;
  final List<Widget> children;

  const _InfoCard({
    Key? key,
    required this.title,
    required this.children,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              title,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ...children,
          ],
        ),
      ),
    );
  }
}

class _InfoRow extends StatelessWidget {
  final String label;
  final String value;

  const _InfoRow({
    Key? key,
    required this.label,
    required this.value,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: const TextStyle(fontWeight: FontWeight.bold)),
          Text(value),
        ],
      ),
    );
  }
}

class _ScrollableListCard extends StatelessWidget {
  final String title;
  final List<String> items;

  const _ScrollableListCard({
    Key? key,
    required this.title,
    required this.items,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              title,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Expanded(
              child: ListView.builder(
                itemCount: items.length,
                itemBuilder: (context, index) {
                  return Text(items[index]);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

